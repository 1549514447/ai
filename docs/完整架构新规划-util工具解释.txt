# 📊 Utils 工具模块代码总结

本模块包含四个核心工具类，为金融AI分析系统提供底层支持功能。

## 📅 date_utils.py - AI驱动的智能日期工具

### 核心功能
- **AI日期解析**: 使用Claude客户端理解自然语言日期表达
- **智能时间范围推断**: 根据查询类型自动推荐最优时间范围
- **格式转换**: 支持标准格式(YYYY-MM-DD)与API格式(YYYYMMDD)互转
- **业务时间周期**: 提供常用业务时间段(今天、本周、本月等)

### 关键类和数据结构
```python
@dataclass
class DateRange:
    start_date: str          # YYYY-MM-DD
    end_date: str           # YYYY-MM-DD
    range_type: str         # specific/relative/inferred
    confidence: float       # 0.0-1.0
    description: str

@dataclass
class DateParseResult:
    dates: List[str]                # 具体日期列表
    ranges: List[DateRange]         # 日期范围列表
    relative_terms: List[str]       # 相对时间术语
    has_time_info: bool            # 是否包含时间信息
    parse_confidence: float        # 解析置信度
    api_format_dates: List[str]    # API格式日期
```

### 核心方法
- `parse_dates_from_query()`: AI解析查询中的日期信息
- `infer_optimal_time_range()`: 智能推断最优时间范围
- `generate_date_range()`: 生成日期范围列表
- `get_business_periods()`: 获取常用业务时间周期

---

## 🛡️ validation_utils.py - AI驱动的智能数据验证器

### 核心功能
- **多层次验证**: 基础→标准→严格→AI增强四个验证级别
- **金融业务逻辑验证**: 专门针对金融数据的合理性检查
- **AI辅助验证**: Claude负责业务逻辑，GPT负责数值一致性
- **智能异常检测**: 自动识别数据异常并提供修复建议

### 关键枚举和数据结构
```python
class ValidationLevel(Enum):
    BASIC = "basic"              # 基础验证
    STANDARD = "standard"        # 标准验证
    STRICT = "strict"           # 严格验证
    AI_ENHANCED = "ai_enhanced"  # AI增强验证

@dataclass
class ValidationIssue:
    field: str                   # 字段名
    issue_type: str             # 问题类型
    severity: ValidationSeverity # 严重程度
    message: str                # 问题描述
    current_value: Any          # 当前值
    suggested_value: Any        # 建议值
    fix_suggestion: str         # 修复建议

@dataclass
class ValidationResult:
    is_valid: bool              # 是否通过验证
    overall_score: float        # 总体评分(0-1)
    issues: List[ValidationIssue] # 问题列表
    warnings_count: int         # 警告数量
    errors_count: int          # 错误数量
```

### 核心方法
- `validate_data()`: 通用数据验证入口
- `validate_api_response()`: API响应验证
- `validate_financial_data()`: 金融数据验证
- `_ai_enhanced_validation()`: AI增强验证

---

## 📈 time_series_builder.py - AI辅助的时间序列数据构建器

### 核心功能
- **智能数据对齐**: 自动补全缺失日期并插值
- **异常值检测**: 基于统计方法+AI验证的异常值处理
- **多指标支持**: 同时构建多个指标的时间序列
- **聚合分析**: 支持周度、月度等时间聚合
- **相关性计算**: 自动计算指标间相关性

### 关键枚举和数据结构
```python
class TimeSeriesType(Enum):
    DAILY = "daily"              # 每日数据
    WEEKLY = "weekly"            # 周度数据
    MONTHLY = "monthly"          # 月度数据
    CUMULATIVE = "cumulative"    # 累计数据
    MOVING_AVERAGE = "moving_avg" # 移动平均

@dataclass
class TimeSeriesPoint:
    date: str                    # 日期(YYYY-MM-DD)
    value: float                 # 数值
    is_interpolated: bool        # 是否为插值
    is_outlier: bool            # 是否为异常值
    confidence: float           # 数据置信度
    metadata: Dict[str, Any]    # 额外元数据

@dataclass
class TimeSeriesMetadata:
    series_type: TimeSeriesType  # 序列类型
    date_range: Tuple[str, str] # 日期范围
    total_points: int           # 总数据点数
    missing_points: int         # 缺失数据点数
    data_quality: DataQuality   # 数据质量等级
    confidence_score: float     # 数据置信度
```

### 核心方法
- `build_daily_time_series()`: 构建每日时间序列
- `build_multi_metric_series()`: 构建多指标时间序列
- `build_aggregated_series()`: 构建聚合时间序列
- `_detect_and_handle_outliers()`: 异常值检测和处理
- `_calculate_correlations()`: 计算指标间相关性

---

## 💰 financial_calculator.py - AI辅助的金融计算引擎

### 核心功能
- **高精度计算**: 使用Decimal避免浮点误差
- **复投场景模拟**: 支持多种复投/提现策略模拟
- **增长率分析**: 支持简单、复合、平均增长率计算
- **风险评估**: 计算各种金融风险指标
- **AI验证**: GPT验证复杂计算逻辑

### 关键枚举和数据结构
```python
class CalculationType(Enum):
    SIMPLE = "simple"            # 简单计算
    COMPOUND = "compound"        # 复利计算
    REINVESTMENT = "reinvestment" # 复投计算
    PREDICTION = "prediction"     # 预测计算
    RISK_ANALYSIS = "risk"       # 风险分析

@dataclass
class CalculationResult:
    result_value: float          # 计算结果值
    calculation_type: CalculationType # 计算类型
    calculation_steps: List[Dict] # 计算步骤
    confidence_score: float      # 计算置信度
    warnings: List[str]         # 计算警告
    metadata: Dict[str, Any]    # 额外信息

@dataclass
class ReinvestmentScenario:
    reinvestment_rate: float     # 复投率
    cashout_rate: float         # 提现率
    compound_frequency: int     # 复利频率(天)
    scenario_name: str          # 场景名称

@dataclass
class GrowthAnalysis:
    growth_rate: float          # 增长率
    trend_direction: str        # 趋势方向
    volatility: float          # 波动性
    confidence_level: float    # 置信水平
    supporting_data: List[float] # 支撑数据
```

### 核心方法
- `calculate_compound_interest()`: 复利计算
- `calculate_reinvestment_impact()`: 复投影响计算
- `calculate_growth_rate()`: 增长率计算
- `calculate_financial_ratios()`: 金融比率计算
- `simulate_reinvestment_scenarios()`: 复投场景模拟
- `predict_future_value()`: 未来价值预测

---

## 🔗 模块间协作关系

```
date_utils.py ←→ validation_utils.py (日期验证)
    ↓
time_series_builder.py ←→ financial_calculator.py (数值计算)
    ↓
提供给上层分析器使用
```

## 🎯 设计特点

1. **AI优先**: 所有模块都支持AI客户端增强功能
2. **容错设计**: AI不可用时自动降级到基础功能
3. **数据类驱动**: 使用dataclass确保数据结构清晰
4. **高精度**: 金融计算使用Decimal确保精度
5. **可扩展**: 模块化设计便于功能扩展
6. **统一接口**: 所有模块都提供工厂函数创建实例

这四个工具模块构成了金融AI分析系统的底层基础，为上层的数据分析、洞察生成等功能提供可靠的工具支持。