# 🤖 **双AI驱动金融系统开发注意事项**

---

## 🎯 **核心开发理念**

### **🧠 AI First 开发策略**
```markdown
❌ 传统方式: 写复杂正则 → 解析数据 → 格式化输出
✅ AI方式:   用Claude理解 → 用GPT计算 → AI格式化输出

原则: 凡是需要"理解"、"解析"、"格式化"的地方，都优先使用AI
```

---

## 🔥 **双AI分工策略**

### **🎨 Claude Sonnet 4 专精领域**

#### **1. 深度理解与分析**
```python
# ✅ 适用场景
- 复杂查询意图理解: "根据过去3个月增长预测未来资金流动"
- 业务逻辑分析: "如果50%复投50%提现的影响分析"
- 数据模式识别: 从历史数据中识别周期性、趋势性
- 风险评估: 分析业务风险和不确定性
- 报告生成: 专业的金融分析报告

# ❌ 避免场景
- 精确数值计算 (交给GPT-4o)
- 大量数据处理 (交给GPT-4o)
```

#### **2. Claude调用示例**
```python
# 🔥 查询理解 - Claude擅长
claude_prompt = f"""
分析以下金融业务查询，提取关键业务逻辑：

用户查询: "{user_query}"

请返回JSON格式分析：
{{
    "query_type": "simple/statistical/prediction/scenario",
    "business_intent": "用户真正想了解什么",
    "time_requirements": {{
        "historical_period": "需要多长历史数据",
        "prediction_horizon": "预测多长时间"
    }},
    "business_parameters": {{
        "reinvestment_rate": "复投率",
        "risk_factors": ["风险因素列表"]
    }},
    "required_data_sources": ["需要的数据源"],
    "complexity_level": "simple/medium/complex/expert"
}}

重点分析用户的真实业务需求和隐含的分析逻辑。
"""

result = await claude_client.analyze_complex_query(claude_prompt, context)
```

### **⚡ GPT-4o 专精领域**

#### **1. 精确计算与数据处理**
```python
# ✅ 适用场景
- 精确数值计算: 复投计算、利息计算、增长率计算
- 数据格式转换: API数据转换为分析格式
- 时间序列处理: 构建历史数据时间线
- 统计计算: 平均值、增长率、方差等
- 公式推导: 金融公式计算

# ❌ 避免场景
- 复杂业务逻辑理解 (交给Claude)
- 创意性分析报告 (交给Claude)
```

#### **2. GPT-4o调用示例**
```python
# 🔥 精确计算 - GPT-4o擅长
gpt_prompt = f"""
基于以下数据进行精确的复投计算：

原始数据: {raw_data}
复投参数: 复投率{reinvestment_rate}%, 时间范围{time_range}

计算要求:
1. 逐日计算到期金额
2. 计算每日复投金额和提现金额
3. 计算复投产生的新收益
4. 计算最终资金余额

返回详细的数值计算结果，确保计算精确。
包含每一步的计算过程和中间结果。
"""

result = await gpt_client.process_direct_query(gpt_prompt, data)
```

---

## 📝 **编写时具体注意事项**

### **🔧 1. 数据提取 - 全AI化**

#### **❌ 传统方式 (避免使用)**
```python
# 不要写这样的代码
import re

def extract_date_from_query(query: str):
    date_pattern = r'(\d{4})年(\d{1,2})月(\d{1,2})日'
    match = re.search(date_pattern, query)
    if match:
        return f"{match.group(1)}{match.group(2):02d}{match.group(3):02d}"
```

#### **✅ AI方式 (推荐使用)**
```python
# 使用AI提取
async def extract_date_from_query(self, query: str) -> Dict[str, Any]:
    """AI驱动的日期提取"""
    prompt = f"""
    从以下查询中提取所有时间信息：

    查询: "{query}"

    返回JSON格式:
    {{
        "start_date": "YYYY-MM-DD or null",
        "end_date": "YYYY-MM-DD or null",
        "relative_time": "last_week/last_month/etc or null",
        "time_type": "specific/relative/range"
    }}

    如果提到"过去30天"、"上个月"等相对时间，请在relative_time中标注。
    """

    result = await self.claude_client.analyze_complex_query(prompt, {"query": query})
    return result["analysis"]
```

### **🔧 2. 数据格式化 - AI优先**

#### **❌ 传统方式**
```python
def format_currency(amount: float) -> str:
    if amount >= 100000000:
        return f"¥{amount/100000000:.2f}亿"
    elif amount >= 10000:
        return f"¥{amount/10000:.2f}万"
    else:
        return f"¥{amount:.2f}"
```

#### **✅ AI方式**
```python
async def ai_format_financial_data(self, data: Dict[str, Any], context: str) -> str:
    """AI驱动的智能格式化"""
    prompt = f"""
    将以下金融数据格式化为用户友好的显示格式：

    数据: {data}
    上下文: {context}

    格式化要求:
    - 大额金额使用万、亿单位
    - 百分比保留合适的小数位
    - 突出关键数据
    - 使用表格或列表组织信息
    - 添加必要的说明

    返回格式化后的文本，直接可以展示给用户。
    """

    result = await self.gpt_client.format_data_response(prompt, data)
    return result["formatted_response"]
```

### **🔧 3. 双AI协作模式**

#### **🎯 标准协作流程**
```python
async def process_complex_query(self, user_query: str) -> Dict[str, Any]:
    """双AI协作处理复杂查询"""

    # Step 1: Claude理解查询意图
    claude_analysis = await self.claude_client.analyze_complex_query(f"""
    深度分析用户查询的业务逻辑和数据需求:
    查询: {user_query}

    分析用户真正想了解什么，需要什么数据，涉及什么计算。
    """, {})

    # Step 2: 基于Claude分析获取数据
    required_data = await self.smart_fetcher.fetch_for_query(claude_analysis)

    # Step 3: GPT-4o进行数值计算
    gpt_calculation = await self.gpt_client.precise_calculation({
        "calculation_type": claude_analysis["calculation_type"],
        "parameters": claude_analysis["business_parameters"],
        "data": required_data
    })

    # Step 4: Claude生成最终报告
    final_report = await self.claude_client.generate_business_insights(
        gpt_calculation, user_query
    )

    return {
        "query_understanding": claude_analysis,
        "calculation_results": gpt_calculation,
        "business_insights": final_report
    }
```

### **🔧 4. API数据处理 - AI智能处理**

#### **✅ AI驱动的API数据理解**
```python
async def process_api_response(self, api_data: Dict, query_context: str) -> Dict[str, Any]:
    """AI处理API响应数据"""

    # 让AI理解API数据结构并提取关键信息
    prompt = f"""
    分析以下API返回的金融数据，提取对用户查询有用的信息：

    API数据: {api_data}
    用户查询上下文: {query_context}

    请提取并组织关键信息:
    1. 关键数值指标
    2. 趋势变化
    3. 异常数据点
    4. 业务含义解释

    返回结构化的分析结果。
    """

    analysis = await self.claude_client.analyze_complex_query(prompt, api_data)
    return analysis
```

---

## ⚠️ **重要开发原则**

### **🎯 1. AI优先原则**
```markdown
任何涉及以下场景，都优先考虑AI：
✅ 文本理解和解析
✅ 数据格式识别和转换
✅ 业务逻辑推理
✅ 模式识别和趋势分析
✅ 自然语言生成
✅ 错误诊断和修复建议

❌ 只有简单的数学运算或固定逻辑才考虑传统代码
```

### **🎯 2. 双AI协作原则**
```markdown
Claude负责: 理解 → 分析 → 洞察 → 报告
GPT-4o负责: 计算 → 转换 → 验证 → 格式化

协作模式:
Claude分析 → GPT计算 → Claude解读 → 输出结果
```

### **🎯 3. 容错与降级原则**
```python
# 🔥 AI失败时的降级策略
async def ai_with_fallback(self, primary_ai_func, fallback_func, *args, **kwargs):
    """AI处理失败时的降级机制"""
    try:
        return await primary_ai_func(*args, **kwargs)
    except Exception as e:
        logger.warning(f"AI处理失败，启用降级: {e}")
        if fallback_func:
            return await fallback_func(*args, **kwargs)
        else:
            return {"error": "AI服务暂时不可用", "fallback_used": True}
```

### **🎯 4. 提示词工程最佳实践**

#### **🔥 Claude提示词模板**
```python
CLAUDE_ANALYSIS_TEMPLATE = """
你是一位资深的金融分析师和业务顾问。

任务: {task_description}
数据: {data_context}
要求: {specific_requirements}

分析框架:
1. 业务理解: 理解真实的业务需求
2. 数据洞察: 从数据中发现关键模式
3. 风险评估: 识别潜在风险和不确定性
4. 行动建议: 提供具体可执行的建议

请提供专业、深入的分析，重点关注业务价值和实用性。
"""
```

#### **🔥 GPT-4o计算模板**
```python
GPT_CALCULATION_TEMPLATE = """
进行精确的金融计算分析。

计算要求: {calculation_requirements}
输入数据: {input_data}
参数设置: {parameters}

计算步骤:
1. 数据验证和预处理
2. 逐步计算过程(显示每一步)
3. 结果验证和检查
4. 格式化输出

要求:
- 确保数值精确
- 显示详细计算过程
- 验证结果合理性
- 提供置信度评估
"""
```

---

## 🚀 **性能优化策略**

### **🔧 1. AI调用优化**
```python
# 🔥 批量AI处理，减少调用次数
async def batch_ai_analysis(self, queries: List[str]) -> List[Dict]:
    """批量处理多个查询，减少AI调用次数"""

    combined_prompt = f"""
    批量分析以下{len(queries)}个金融查询:

    {chr(10).join([f"{i+1}. {q}" for i, q in enumerate(queries)])}

    请对每个查询分别分析并返回JSON数组格式结果。
    """

    # 一次AI调用处理多个查询
    result = await self.claude_client.analyze_complex_query(combined_prompt, {})
    return result["analysis"]
```

### **🔧 2. 智能缓存策略**
```python
# 🔥 AI结果缓存，避免重复计算
@lru_cache(maxsize=1000)
async def cached_ai_analysis(self, query_hash: str, prompt: str) -> Dict[str, Any]:
    """缓存AI分析结果"""
    return await self.claude_client.analyze_complex_query(prompt, {})
```

---

## 📋 **开发检查清单**

### **✅ 每个模块必须包含**
```markdown
□ AI优先的数据处理逻辑
□ 双AI协作的工作流程
□ 完整的错误处理和降级机制
□ 详细的日志记录(AI调用结果)
□ 输入输出的AI验证
□ 性能监控(AI调用耗时)
□ 结果缓存机制
```

### **✅ 提示词质量检查**
```markdown
□ 提示词清晰明确，没有歧义
□ 包含具体的输出格式要求
□ 提供足够的上下文信息
□ 包含错误处理指令
□ 指定返回数据的结构格式
```

### **✅ AI调用安全检查**
```markdown
□ 输入数据大小限制检查
□ AI响应格式验证
□ 异常情况下的降级处理
□ 敏感信息过滤
□ 调用频率控制
```

---

## 🎯 **核心理念总结**

```markdown
🧠 用AI的大脑，不用代码的逻辑
⚡ 双AI协作，发挥各自优势
🔄 智能降级，确保系统稳定
📊 数据驱动，业务价值导向
🚀 性能优化，用户体验优先
```

**记住：我们的目标是构建一个真正智能的金融分析系统，让AI成为核心驱动力，而不仅仅是辅助工具！**